// Generated by CoffeeScript 1.12.7
(function() {
  var BootRunner, ClojureRunner, EXIT_CMD, GradleRunner, LeinRunner, LocalReplProcess, NReplConnection, Task, fs, path,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Task = require('atom').Task;

  LeinRunner = require.resolve('./lein-runner');

  BootRunner = require.resolve('./boot-runner');

  GradleRunner = require.resolve('./gradle-runner');

  ClojureRunner = require.resolve('./clojure-runner');

  path = require('path');

  fs = require('fs');

  NReplConnection = require('./nrepl-connection');

  EXIT_CMD = "(System/exit 0)";

  module.exports = LocalReplProcess = (function() {
    function LocalReplProcess() {}

    LocalReplProcess.prototype.getRootProject = function(currentPath, limit) {
      var matches, parentDirectory;
      if (limit == null) {
        limit = 0;
      }
      if (currentPath.startsWith("atom://")) {
        return;
      }
      parentDirectory = path.resolve(currentPath, "..");
      if (currentPath !== parentDirectory && limit < 100) {
        matches = fs.readdirSync(currentPath).filter(function(f) {
          return f === "project.clj" || f === "build.boot" || f === "gradlew" || f === "gradlew.bat" || f === "deps.edn";
        });
        if (currentPath && matches.length === 0) {
          return this.getRootProject(parentDirectory, limit + 1);
        } else {
          if (matches.length !== 0) {
            return currentPath;
          }
        }
      }
    };

    LocalReplProcess.prototype.getDefaultProjectPath = function() {
      var error, i, len, p, possiblePath, ref;
      ref = atom.packages.getPackageDirPaths();
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        possiblePath = p + "/proto-repl/proto-no-proj";
        try {
          fs.lstatSync(possiblePath);
          return possiblePath;
        } catch (error1) {
          error = error1;
          null;
        }
      }
    };

    LocalReplProcess.prototype.start = function(projectPath, connOptions) {
      var i, len, ref, repl, replType, replsFound;
      if (this.running()) {
        return;
      }
      if (projectPath == null) {
        projectPath = atom.project.getPaths()[0];
      }
      if (projectPath) {
        projectPath = this.getRootProject(projectPath);
      }
      replsFound = [];
      if (fs.existsSync(projectPath + "/build.boot")) {
        replsFound.push("boot");
      }
      if (fs.existsSync(projectPath + "/project.clj")) {
        replsFound.push("lein");
      }
      if (fs.existsSync(projectPath + "/deps.edn")) {
        replsFound.push("clojure");
      }
      if (fs.existsSync(projectPath + "/gradlew") || fs.existsSync(projectPath + "/gradlew.bat")) {
        replsFound.push("gradle");
      }
      if ((projectPath != null)) {
        if (replsFound.length) {
          ref = atom.config.get("proto-repl.preferredRepl");
          for (i = 0, len = ref.length; i < len; i++) {
            repl = ref[i];
            if (indexOf.call(replsFound, repl) >= 0) {
              replType = repl;
              break;
            }
          }
        } else {
          replType = "lein";
          projectPath = this.getDefaultProjectPath();
        }
      } else {
        replType = "lein";
        projectPath = this.getDefaultProjectPath();
      }
      this.replView.info("Starting REPL with " + replType + " in " + projectPath + "\n", true);
      switch (replType) {
        case "gradle":
          this.process = Task.once(GradleRunner, path.resolve(projectPath), atom.config.get('proto-repl.gradleArgs').split(" "));
          break;
        case "boot":
          this.process = Task.once(BootRunner, path.resolve(projectPath), atom.config.get('proto-repl.bootPath').replace("/boot", ""), atom.config.get('proto-repl.bootArgs').split(" "));
          break;
        case "clojure":
          this.process = Task.once(ClojureRunner, path.resolve(projectPath), atom.config.get('proto-repl.clojurePath').replace("/clj", ""));
          break;
        default:
          this.process = Task.once(LeinRunner, path.resolve(projectPath), atom.config.get('proto-repl.leinPath').replace("/lein", ""), atom.config.get('proto-repl.leinArgs').split(" "));
      }
      this.process.on('proto-repl-process:data', (function(_this) {
        return function(data) {
          return _this.replView.stdout(data);
        };
      })(this));
      this.process.on('proto-repl-process:nrepl-port', (function(_this) {
        return function(port) {
          connOptions.port = port;
          return _this.conn.start(connOptions);
        };
      })(this));
      return this.process.on('proto-repl-process:exit', (function(_this) {
        return function() {
          if (connOptions != null) {
            connOptions.stopCallback();
          }
          _this.process = null;
          _this.conn.close();
          return _this.replView.info("REPL Closed");
        };
      })(this));
    };

    LocalReplProcess.prototype.running = function() {
      return this.process !== null && this.conn.connected();
    };

    return LocalReplProcess;

  })();

}).call(this);
