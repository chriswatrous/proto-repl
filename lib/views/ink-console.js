// Generated by CoffeeScript 1.12.7
(function() {
  var CONSOLE_URI, CompositeDisposable, Emitter, Highlights, InkConsole, Point, Range, ref;

  ref = require('atom'), CompositeDisposable = ref.CompositeDisposable, Range = ref.Range, Point = ref.Point, Emitter = ref.Emitter;

  Highlights = require('../highlights.js');

  CONSOLE_URI = 'atom://proto-repl/console';

  module.exports = InkConsole = (function() {
    function InkConsole() {}

    InkConsole.prototype.result = function(text) {
      var div, el, html;
      html = this.highlighter.highlightSync({
        fileContents: text,
        scopeName: 'source.clojure'
      });
      html = html.replace(/&nbsp;/g, " ");
      div = document.createElement('div');
      div.innerHTML = html;
      el = div.firstChild;
      el.classList.add("proto-repl-console");
      el.style.fontSize = atom.config.get('editor.fontSize') + "px";
      el.style.lineHeight = atom.config.get('editor.lineHeight');
      return this.console.result(el, {
        error: false
      });
    };

    InkConsole.prototype.displayExecutedCode = function(code) {
      var inputCell;
      inputCell = this.console.getInput();
      if (!(inputCell.editor.getText())) {
        inputCell.editor.setText(code);
      }
      this.console.logInput();
      this.console.done();
      return this.console.input();
    };

    InkConsole.prototype.executeEnteredText = function(inputCell) {
      var code, editor;
      if (inputCell == null) {
        inputCell = {};
      }
      editor = this.console.getInput().editor;
      if (!editor.getText().trim()) {
        return null;
      }
      code = editor.getText();
      if (!atom.config.get('proto-repl.displayExecutedCodeInRepl')) {
        this.displayExecutedCode(code);
      }
      return window.protoRepl.executeCode(code, {
        displayCode: code,
        doBlock: true
      });
    };

    return InkConsole;

  })();

}).call(this);
