// Generated by CoffeeScript 1.12.7
(function() {
  var ExtensionsFeature, NREPL_SESSION;

  NREPL_SESSION = "ExtensionsSession";

  module.exports = ExtensionsFeature = (function() {
    ExtensionsFeature.prototype.protoRepl = null;

    ExtensionsFeature.prototype.running = false;

    ExtensionsFeature.prototype.codeExecutionExtensions = {};

    ExtensionsFeature.prototype.numErrors = 0;

    function ExtensionsFeature(protoRepl) {
      this.protoRepl = protoRepl;
      null;
    }

    ExtensionsFeature.prototype.registerCodeExecutionExtension = function(name, callback) {
      return this.codeExecutionExtensions[name] = callback;
    };

    ExtensionsFeature.prototype.handleReplResult = function(value) {
      var data, extensionCallback, extensionName, parsed;
      if (value.match(/\[\s*:proto-repl-code-execution-extension/)) {
        parsed = window.protoRepl.parseEdn(value);
        extensionName = parsed[1];
        data = parsed[2];
        if (extensionCallback = this.codeExecutionExtensions[extensionName]) {
          extensionCallback(data);
          return true;
        }
      }
    };

    ExtensionsFeature.prototype.handleRequests = function(commandEdn) {
      var error, extensionCallback, extensionName, i, len, message, messages, result, results;
      messages = window.protoRepl.parseEdn(commandEdn);
      results = [];
      for (i = 0, len = messages.length; i < len; i++) {
        message = messages[i];
        extensionName = message["extension-name"];
        if (extensionCallback = this.codeExecutionExtensions[extensionName]) {
          try {
            result = extensionCallback(message.data);
            if (message["requires-response"]) {
              results.push(this.respondWith(message.id, result));
            } else {
              results.push(void 0);
            }
          } catch (error1) {
            error = error1;
            results.push(console.log("Error handling message " + message + ". Error " + error));
          }
        } else {
          results.push(console.log("No extension registered with name " + extensionName));
        }
      }
      return results;
    };

    ExtensionsFeature.prototype.respondWith = function(id, response) {
      var code;
      code = "(do (require '[proto-repl.extension-comm]) (proto-repl.extension-comm/respond-to proto-repl.extension-comm/global-ext-state \"" + id + "\" \"" + (window.protoRepl.jsToEdn(response)) + "\"))";
      return window.protoRepl.executeCode(code, {
        displayInRepl: false,
        session: NREPL_SESSION,
        resultHandler: (function(_this) {
          return function(result, options) {
            if (result.error) {
              return console.log("Error responding: " + result.error);
            }
          };
        })(this)
      });
    };

    ExtensionsFeature.prototype.readNextRequest = function() {
      var code;
      if (!this.running) {
        return;
      }
      code = "(do (require '[proto-repl.extension-comm]) (proto-repl.extension-comm/read-requests proto-repl.extension-comm/global-ext-state 10))";
      return window.protoRepl.executeCode(code, {
        displayInRepl: false,
        session: NREPL_SESSION,
        resultHandler: (function(_this) {
          return function(result, options) {
            if (result.value === ":proto-repl.extension-comm/timeout") {
              return _this.readNextRequest();
            } else if (result.value) {
              _this.handleRequests(result.value);
              return _this.readNextRequest();
            } else {
              _this.numErrors = _this.numErrors + 1;
              if (_this.numErrors < 10) {
                return setTimeout(function() {
                  return _this.readNextRequest();
                }, 1000);
              } else {
                console.log("Repeated errors trying to execute request " + result.error + ". Stopping automatic extensions feature");
                return _this.stopExtensionRequestProcessing();
              }
            }
          };
        })(this)
      });
    };

    ExtensionsFeature.prototype.startExtensionRequestProcessing = function() {
      if (!this.running) {
        this.running = true;
        this.numErrors = 0;
        return this.readNextRequest();
      }
    };

    ExtensionsFeature.prototype.stopExtensionRequestProcessing = function() {
      return this.running = false;
    };

    return ExtensionsFeature;

  })();

}).call(this);
