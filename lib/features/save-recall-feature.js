// Generated by CoffeeScript 1.12.7
(function() {
  var CompositeDisposable, SaveRecallFeature, exampleTree;

  CompositeDisposable = require('atom').CompositeDisposable;

  exampleTree = ["                                      m |         a | b |", ["                                   {} |   :apples | 2 |", "m: {}", "a: :apples", "b: 2"], ["                          {:apples 2} |  :oranges | 3 |", "m: {:apples 2}", "a: :oranges", "b: 3"], ["              {:apples 2, :oranges 3} | :cherries | 4 |", "m: {:apples 2, :oranges 3}", "a: :cherries", "b: 4"], [" {:apples 2, :oranges 3, :cherries 4} |   :apples | 7 |", "m: {:apples 2, :oranges 3, :cherries 4}", "a: :apples", "b: 7"]];

  module.exports = SaveRecallFeature = (function() {
    SaveRecallFeature.prototype.subscriptions = null;

    function SaveRecallFeature() {
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(atom.commands.add('atom-workspace', {
        'proto-repl:insert-save-value-call': (function(_this) {
          return function() {
            return _this.insertSaveValueCall();
          };
        })(this),
        'proto-repl:display-saved-values': (function(_this) {
          return function() {
            return _this.fetchAndDisplaySavedValues();
          };
        })(this),
        'proto-repl:clear-saved-values': (function(_this) {
          return function() {
            return _this.clearSavedValues();
          };
        })(this)
      }));
    }

    SaveRecallFeature.prototype.deactivate = function() {
      return this.subscriptions.dispose();
    };

    SaveRecallFeature.prototype.insertSaveValueCall = function() {
      var editor;
      if (editor = atom.workspace.getActiveTextEditor()) {
        this.nextUniqueSaveId || (this.nextUniqueSaveId = 1);
        editor.insertText("(proto-repl.saved-values/save " + this.nextUniqueSaveId + ")");
        return this.nextUniqueSaveId += 1;
      }
    };

    SaveRecallFeature.prototype.clearSavedValues = function() {
      var editor;
      window.protoRepl.executeCode("(proto-repl.saved-values/clear-saved-values!)", {
        displayInRepl: false
      });
      if (editor = atom.workspace.getActiveTextEditor()) {
        return atom.commands.dispatch(atom.views.getView(editor), 'inline-results:clear-all');
      }
    };

    SaveRecallFeature.prototype.fetchAndDisplaySavedValues = function() {
      return window.protoRepl.executeCode("(proto-repl.saved-values/saved-values)", {
        displayInRepl: false,
        resultHandler: (function(_this) {
          return function(result, options) {
            var editor, foundRange, i, len, range, ref, results, tree, uniq, uniqsToTrees;
            if (result.error) {
              window.protoRepl.stderr("Error polling for saved values " + result.error);
              return;
            }
            console.log(result.value);
            uniqsToTrees = window.protoRepl.ednSavedValuesToDisplayTrees(result.value);
            results = [];
            for (i = 0, len = uniqsToTrees.length; i < len; i++) {
              ref = uniqsToTrees[i], uniq = ref[0], tree = ref[1];
              if (foundRange = window.protoRepl.EditorUtils.findEditorRangeContainingString(uniq)) {
                editor = foundRange[0], range = foundRange[1];
                results.push(window.protoRepl.repl.displayInline(editor, range, tree));
              } else {
                results.push(void 0);
              }
            }
            return results;
          };
        })(this)
      });
    };

    SaveRecallFeature.prototype.startSavedInlineDisplayPolling = function() {
      return this.pollingId = setInterval((function(_this) {
        return function() {
          return _this.fetchAndDisplaySavedValues();
        };
      })(this), 5000);
    };

    SaveRecallFeature.prototype.stopSavedInlineDisplayPolling = function() {
      return clearInterval(this.pollingId);
    };

    return SaveRecallFeature;

  })();

}).call(this);
