// Generated by CoffeeScript 1.12.7
(function() {
  var ClojureVersion, EditorUtils, NReplConnection, nrepl;

  nrepl = require('jg-nrepl-client');

  ClojureVersion = require('./clojure-version');

  EditorUtils = require('../editor-utils');

  module.exports = NReplConnection = (function() {
    function NReplConnection() {}

    NReplConnection.prototype.determineClojureVersion = function(callback) {
      return this.conn["eval"]("*clojure-version*", "user", this.session, (function(_this) {
        return function(err, messages) {
          var msg, value;
          value = ((function() {
            var i, len, results;
            results = [];
            for (i = 0, len = messages.length; i < len; i++) {
              msg = messages[i];
              results.push(msg.value);
            }
            return results;
          })())[0];
          _this.clojureVersion = new ClojureVersion(window.protoRepl.parseEdn(value));
          if (!_this.clojureVersion.isSupportedVersion()) {
            atom.notifications.addWarning("WARNING: This version of Clojure is not supported by Proto REPL. You may experience issues.", {
              dismissable: true
            });
          }
          return callback();
        };
      })(this));
    };

    NReplConnection.prototype.startMessageHandling = function(messageHandler) {
      return this.conn.messageStream.on("messageSequence", (function(_this) {
        return function(id, messages) {
          var i, len, msg, results;
          if (!_this.namespaceNotFound(messages)) {
            results = [];
            for (i = 0, len = messages.length; i < len; i++) {
              msg = messages[i];
              if (msg.ns && msg.session === _this.session) {
                _this.currentNs = msg.ns;
              }
              if (msg.session === _this.session) {
                results.push(messageHandler(msg));
              } else if (msg.session === _this.cmdSession && msg.out) {
                results.push(messageHandler(msg));
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        };
      })(this));
    };

    NReplConnection.prototype.connected = function() {
      return this.conn !== null;
    };

    NReplConnection.prototype.getCurrentNs = function() {
      return this.currentNs;
    };

    NReplConnection.prototype.codeMayContainReaderConditional = function(code) {
      return code.includes("#?");
    };

    NReplConnection.prototype.wrapCodeInReadEval = function(code) {
      var escapedStr, ref;
      if (((ref = this.clojureVersion) != null ? ref.isReaderConditionalSupported() : void 0) && this.codeMayContainReaderConditional(code)) {
        escapedStr = EditorUtils.escapeClojureCodeInString(code);
        return "(eval (read-string {:read-cond :allow} " + escapedStr + "))";
      } else {
        return code;
      }
    };

    NReplConnection.prototype.namespaceNotFound = function(messages) {
      var i, len, msg, ref;
      for (i = 0, len = messages.length; i < len; i++) {
        msg = messages[i];
        if (((ref = msg.status) != null ? ref.length : void 0) > 0) {
          if (msg.status[0] === "namespace-not-found") {
            return true;
          }
        }
      }
    };

    return NReplConnection;

  })();

}).call(this);
