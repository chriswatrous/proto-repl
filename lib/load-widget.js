// Generated by CoffeeScript 1.12.7
(function() {
  var Spinner,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Spinner = (function() {
    function Spinner() {
      this.stop = bind(this.stop, this);
      this.startAt = bind(this.startAt, this);
      this.decorationsByEditorId = {};
    }

    Spinner.prototype.widget = function() {
      var widget;
      widget = document.createElement('div');
      widget.classList.add('sk-folding-cube');
      widget.innerHTML = "<div class=\"sk-cube1 sk-cube\"></div>\n<div class=\"sk-cube2 sk-cube\"></div>\n<div class=\"sk-cube4 sk-cube\"></div>\n<div class=\"sk-cube3 sk-cube\"></div>";
      return widget;
    };

    Spinner.prototype.startAt = function(editor, range) {
      var decoration, decorations, id, item, marker, type;
      if (!(editor && range)) {
        return;
      }
      type = 'overlay';
      decorations = this.decorationsByEditorId[editor.id];
      if (decorations === void 0) {
        decorations = new Map();
        this.decorationsByEditorId[editor.id] = decorations;
      }
      item = this.widget();
      marker = editor.markBufferRange(range);
      decoration = editor.decorateMarker(marker, {
        type: type,
        item: item
      });
      id = Date.now();
      decorations.set(id, decoration);
      return id;
    };

    Spinner.prototype.stop = function(editor, id) {
      var decorations, ref, timestamps;
      if (!editor) {
        return;
      }
      decorations = this.decorationsByEditorId[editor.id];
      if (!decorations) {
        return;
      }
      if (id == null) {
        timestamps = Array.from(decorations.keys());
        id = Math.min.apply(null, timestamps);
      }
      if ((ref = decorations.get(id)) != null) {
        ref.destroy();
      }
      return decorations["delete"](id);
    };

    Spinner.prototype.clearAll = function() {
      var decorations, editorId, ref;
      ref = this.decorationsByEditorId;
      for (editorId in ref) {
        decorations = ref[editorId];
        decorations.forEach((function(_this) {
          return function(decoration, id) {
            return decoration.destroy();
          };
        })(this));
      }
      return this.decorationsByEditorId = {};
    };

    return Spinner;

  })();

}).call(this);
