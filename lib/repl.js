// Generated by CoffeeScript 1.12.7
(function() {
  var Emitter, Repl, Spinner, Task, TreeView, logElapsed, ref, startTime,
    slice = [].slice;

  ref = require('atom'), Task = ref.Task, Emitter = ref.Emitter;

  Spinner = require('./load-widget');

  TreeView = require('./tree-view');

  startTime = function() {
    return window.performance.now();
  };

  logElapsed = function(name, start) {
    var elapsed;
    elapsed = window.performance.now() - start;
    return console.log(name + " " + elapsed.toFixed() + " ms");
  };

  module.exports = Repl = (function() {
    Repl.prototype.emitter = null;

    Repl.prototype.process = null;

    Repl.prototype.replView = null;

    Repl.prototype.ink = null;

    Repl.prototype.extensionsFeature = null;

    function Repl(extensionsFeature) {
      this.extensionsFeature = extensionsFeature;
      this.emitter = new Emitter;
      this.loadingIndicator = new Spinner();
    }

    Repl.prototype.running = function() {
      var ref1;
      return (ref1 = this.process) != null ? ref1.running() : void 0;
    };

    Repl.prototype.displayInline = function(editor, range, tree, error) {
      var end, r, recurseTree, view;
      if (error == null) {
        error = false;
      }
      end = range.end.row;
      this.ink.Result.removeLines(editor, end, end);
      recurseTree = (function(_this) {
        return function(arg) {
          var button_options, childViews, children, head;
          head = arg[0], button_options = arg[1], children = 3 <= arg.length ? slice.call(arg, 2) : [];
          if (children && children.length > 0) {
            childViews = children.map(function(x) {
              if (x instanceof Array) {
                return recurseTree(x);
              } else {
                return TreeView.leafView(x, {});
              }
            });
            return TreeView.treeView(head, childViews, button_options);
          } else {
            return TreeView.leafView(head, button_options || {});
          }
        };
      })(this);
      view = recurseTree(tree);
      return r = new this.ink.Result(editor, [end, end], {
        content: view,
        error: error,
        type: error ? 'block' : 'inline',
        scope: 'proto-repl'
      });
    };

    Repl.prototype.makeInlineHandler = function(editor, range, valueToTreeFn) {
      return (function(_this) {
        return function(result) {
          var isError, tree;
          isError = false;
          if (result.value) {
            tree = valueToTreeFn(result.value);
          } else {
            tree = [result.error];
            isError = true;
          }
          return _this.displayInline(editor, range, tree, isError);
        };
      })(this);
    };

    Repl.prototype.inlineResultHandler = function(result, options) {
      var handler, io;
      if (this.ink && options.inlineOptions && atom.config.get('proto-repl.showInlineResults')) {
        io = options.inlineOptions;
        handler = this.makeInlineHandler(io.editor, io.range, function(value) {
          return window.protoRepl.ednToDisplayTree(value);
        });
        return handler(result);
      }
    };

    Repl.prototype.normalResultHandler = function(result, options) {
      return this.inlineResultHandler(result, options);
    };

    Repl.prototype.needsDoBlock = function(code) {
      if (code.match(/^\s*[A-Za-z0-9\-!?.<>:\/*=+_]+\s*$/g) !== null) {
        return false;
      } else if (code.match(/^\s*\([^\(\)]+\)\s*$/g) !== null) {
        return false;
      } else {
        return true;
      }
    };

    Repl.prototype.executeEnteredText = function() {
      if (!this.running()) {
        return null;
      }
      return this.replView.executeEnteredText();
    };

    Repl.prototype.exit = function() {
      if (!this.running()) {
        return null;
      }
      this.info("Stopping REPL");
      this.process.stop();
      return this.process = null;
    };

    Repl.prototype.interrupt = function() {
      this.loadingIndicator.clearAll();
      return this.process.interrupt();
    };

    Repl.prototype.clear = function() {
      return this.replView.clear();
    };

    Repl.prototype.info = function(text) {
      var ref1;
      return (ref1 = this.replView) != null ? ref1.info(text) : void 0;
    };

    Repl.prototype.stderr = function(text) {
      var ref1;
      return (ref1 = this.replView) != null ? ref1.stderr(text) : void 0;
    };

    Repl.prototype.stdout = function(text) {
      var ref1;
      return (ref1 = this.replView) != null ? ref1.stdout(text) : void 0;
    };

    Repl.prototype.doc = function(text) {
      var ref1;
      return (ref1 = this.replView) != null ? ref1.doc(text) : void 0;
    };

    return Repl;

  })();

}).call(this);
