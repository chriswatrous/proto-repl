// Generated by CoffeeScript 1.12.7
(function() {
  var DEFAULT_NS, SelfHostedProcess, allowUnsafeEval, allowUnsafeNewFunction, ref, self_hosted_clj;

  self_hosted_clj = require('../proto_repl/self_hosted.js');

  ref = require('loophole'), allowUnsafeEval = ref.allowUnsafeEval, allowUnsafeNewFunction = ref.allowUnsafeNewFunction;

  DEFAULT_NS = "cljs.user";

  module.exports = SelfHostedProcess = (function() {
    SelfHostedProcess.prototype.replView = null;

    SelfHostedProcess.prototype.currentNs = DEFAULT_NS;

    function SelfHostedProcess(replView) {
      this.replView = replView;
      null;
    }

    SelfHostedProcess.prototype.getType = function() {
      return "SelfHosted";
    };

    SelfHostedProcess.prototype.start = function(arg) {
      var messageHandler, startCallback;
      messageHandler = arg.messageHandler, startCallback = arg.startCallback;
      if (this.running()) {
        return;
      }
      this.currentNs = DEFAULT_NS;
      this.messageHandler = messageHandler;
      this.startRedirectingConsoleOutput();
      return startCallback();
    };

    SelfHostedProcess.prototype["eval"] = function(code, successCb, errorCb) {
      return allowUnsafeEval((function(_this) {
        return function() {
          return allowUnsafeNewFunction(function() {
            return self_hosted_clj.eval_str(code, function(result) {
              var error, ref1;
              if (result["success?"]) {
                return successCb(result.value);
              } else {
                error = ((ref1 = result.error.cause) != null ? ref1.toString() : void 0) || result.error.toString();
                return errorCb(error);
              }
            });
          });
        };
      })(this));
    };

    SelfHostedProcess.prototype.switchNs = function(ns, successCb, errorCb) {
      return this["eval"]("(in-ns '" + ns + ")", ((function(_this) {
        return function() {
          _this.currentNs = ns;
          return successCb();
        };
      })(this)), (function(error) {
        return errorCb(error);
      }));
    };

    SelfHostedProcess.prototype.getCurrentNs = function() {
      return this.currentNs;
    };

    SelfHostedProcess.prototype.sendCommand = function(code, options, resultHandler) {
      var errorHandler, successCb;
      successCb = (function(_this) {
        return function(value) {
          if (options.displayInRepl !== false) {
            _this.messageHandler({
              value: value
            });
          }
          return resultHandler({
            value: value
          });
        };
      })(this);
      errorHandler = (function(_this) {
        return function(error) {
          if (options.displayInRepl !== false) {
            _this.messageHandler({
              err: error
            });
          }
          return resultHandler({
            error: error
          });
        };
      })(this);
      if (options.ns) {
        return this.switchNs(options.ns, ((function(_this) {
          return function() {
            return _this["eval"](code, successCb, errorHandler);
          };
        })(this)), errorHandler);
      } else {
        return this["eval"](code, successCb, errorHandler);
      }
    };

    SelfHostedProcess.prototype.interrupt = function() {
      return null;
    };

    SelfHostedProcess.prototype.running = function() {
      return this.messageHandler != null;
    };

    SelfHostedProcess.prototype.stop = function(session) {
      if (!this.running()) {
        return;
      }
      this.stopRedirectingConsoleOutput();
      return this.replView.info("Self hosted REPL stopped");
    };

    SelfHostedProcess.prototype.startRedirectingConsoleOutput = function() {
      var originalError, originalLog, originalWarn, protoError, protoLog, protoWarn;
      if (this.originalLog) {
        console.log("Already redirecting logging");
      } else {
        originalLog = console.log;
        this.originalLog = originalLog;
        originalWarn = console.warn;
        this.originalWarn = originalWarn;
        originalError = console.error;
        this.originalError = originalError;
        protoLog = (function(_this) {
          return function(text) {
            return _this.replView.info(text);
          };
        })(this);
        protoWarn = (function(_this) {
          return function(text) {
            return _this.replView.stderr(text);
          };
        })(this);
        protoError = (function(_this) {
          return function(text) {
            return _this.replView.stderr(text);
          };
        })(this);
        console.log = function() {
          var args;
          args = Array.prototype.slice.call(arguments);
          protoLog(args.join(" "));
          return originalLog.apply(console, arguments);
        };
        console.warn = function() {
          var args;
          args = Array.prototype.slice.call(arguments);
          protoWarn(args.join(" "));
          return originalWarn.apply(console, arguments);
        };
        return console.error = function() {
          var args;
          args = Array.prototype.slice.call(arguments);
          protoError(args.join(" "));
          return originalError.apply(console, arguments);
        };
      }
    };

    SelfHostedProcess.prototype.stopRedirectingConsoleOutput = function() {
      if (!this.originalLog) {
        return;
      }
      console.log = this.originalLog;
      console.warn = this.originalWarn;
      return console.error = this.originalError;
    };

    return SelfHostedProcess;

  })();

}).call(this);
