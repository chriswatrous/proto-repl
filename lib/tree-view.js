// Generated by CoffeeScript 1.12.7
(function() {
  var button, div, ref, span, treeButtonClasses, treeButtonClicked, views,
    slice = [].slice;

  views = {
    dom: function(arg) {
      var attrs, child, contents, i, k, len, tag, v, view;
      tag = arg.tag, attrs = arg.attrs, contents = arg.contents;
      view = document.createElement(tag);
      for (k in attrs) {
        v = attrs[k];
        view.setAttribute(k, v);
      }
      if (contents != null) {
        if (contents.constructor !== Array) {
          contents = [contents];
        }
        for (i = 0, len = contents.length; i < len; i++) {
          child = contents[i];
          view.appendChild(this.render(child));
        }
      }
      return view;
    },
    views: {
      dom: function() {
        var a;
        a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return views.dom.apply(views, a);
      }
    },
    render: function(data) {
      if (this.views.hasOwnProperty(data.type)) {
        return this.views[data.type](data);
      } else if ((data != null ? data.constructor : void 0) === String) {
        return new Text(data);
      } else {
        return data;
      }
    },
    tag: function(tag, attrs, contents) {
      var ref;
      if ((attrs != null ? attrs.constructor : void 0) === String) {
        attrs = {
          "class": attrs
        };
      }
      if ((attrs != null ? attrs.constructor : void 0) !== Object) {
        ref = [attrs, void 0], contents = ref[0], attrs = ref[1];
      }
      return {
        type: 'dom',
        tag: tag,
        attrs: attrs,
        contents: contents
      };
    },
    tags: {}
  };

  ['div', 'span', 'a', 'strong', 'table', 'tr', 'td', 'button'].forEach(function(tag) {
    return views.tags[tag] = function(attrs, contents) {
      return views.tag(tag, attrs, contents);
    };
  });

  ref = views.tags, div = ref.div, span = ref.span, button = ref.button;

  treeButtonClasses = function(arg) {
    var button_class;
    button_class = arg.button_class;
    return 'btn btn-xs ' + button_class;
  };

  treeButtonClicked = function(arg, textDiv) {
    var button_fn;
    button_fn = arg.button_fn;
    textDiv.classList.add('clicking-btn');
    setTimeout((function(_this) {
      return function() {
        return textDiv.classList.remove('clicking-btn');
      };
    })(this), 250);
    return button_fn();
  };

  module.exports = {
    leafView: function(leaf, btnOptions) {
      var btn, textSpan, view;
      textSpan = span('text', leaf);
      if (btnOptions.button_text) {
        btn = button(treeButtonClasses(btnOptions), btnOptions.button_text);
        view = views.render(div('ink leaf', [btn, textSpan]));
        view.querySelector('button').onclick = (function(_this) {
          return function() {
            return treeButtonClicked(btnOptions, view);
          };
        })(this);
      } else {
        view = views.render(div('ink leaf', [textSpan]));
      }
      return view;
    },
    treeView: function(head, children, btnOptions) {
      var body, btn, header, i, icon, len, ref1, sel, view;
      icon = span('icon icon-chevron-right open');
      body = div('body gutted', children);
      if (btnOptions.button_text) {
        btn = button(treeButtonClasses(btnOptions), btnOptions.button_text);
        header = div("header gutted", [span('header-text', [head]), btn]);
        children = [icon, header, body];
      } else {
        header = div("header gutted", [span('header-text', [head])]);
        children = [icon, header, body];
      }
      view = views.render(div('ink proto-tree', children));
      if (btnOptions.button_text) {
        view.querySelector('button').onclick = (function(_this) {
          return function() {
            return treeButtonClicked(btnOptions, view);
          };
        })(this);
      }
      ref1 = [':scope > .header > .header-text', ':scope > .icon'];
      for (i = 0, len = ref1.length; i < len; i++) {
        sel = ref1[i];
        view.querySelector(sel).onclick = (function(_this) {
          return function() {
            return setTimeout((function() {
              return _this.toggle(view);
            }), 0);
          };
        })(this);
      }
      this.toggle(view);
      return view;
    },
    toggle: function(view) {
      var body, icon;
      body = view.querySelector(':scope > .body');
      icon = view.querySelector(':scope > .icon');
      if (body == null) {
        return;
      }
      if (body.style.display === '') {
        body.style.display = 'none';
        return icon.classList.remove('open');
      } else {
        body.style.display = '';
        return icon.classList.add('open');
      }
    }
  };

}).call(this);
