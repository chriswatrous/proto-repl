// Generated by CoffeeScript 1.12.7
(function() {
  var $, NReplConnectionView, TextEditorView, View, defaultHost, defaultPort, fs, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('atom-space-pen-views'), $ = ref.$, View = ref.View, TextEditorView = ref.TextEditorView;

  fs = require('fs');

  defaultHost = "localhost";

  defaultPort = "";

  module.exports = NReplConnectionView = (function(superClass) {
    extend(NReplConnectionView, superClass);

    NReplConnectionView.content = function() {
      return this.div({
        "class": "proto-repl proto-repl-nrepl-connection-dialog"
      }, (function(_this) {
        return function() {
          _this.h3("nRepl connection", {
            "class": "icon icon-clobe"
          });
          _this.div({
            "class": "block"
          }, function() {
            _this.label("Host");
            return _this.subview("hostEditor", new TextEditorView({
              mini: true,
              placeholderText: defaultHost,
              attributes: {
                tabindex: 1
              }
            }));
          });
          return _this.div({
            "class": "block"
          }, function() {
            _this.label("Port");
            return _this.subview("portEditor", new TextEditorView({
              mini: true,
              placeholderText: defaultPort,
              attributes: {
                tabindex: 2
              }
            }));
          });
        };
      })(this));
    };

    function NReplConnectionView(confirmCallback) {
      this.confirmCallback = confirmCallback;
      NReplConnectionView.__super__.constructor.apply(this, arguments);
    }

    NReplConnectionView.prototype.initialize = function() {
      return atom.commands.add(this.element, {
        "core:confirm": (function(_this) {
          return function() {
            return _this.onConfirm();
          };
        })(this),
        "core:cancel": (function(_this) {
          return function() {
            return _this.onCancel();
          };
        })(this)
      });
    };

    NReplConnectionView.prototype.show = function() {
      var nreplPortPath;
      if (this.panel == null) {
        this.panel = atom.workspace.addModalPanel({
          item: this,
          visible: false
        });
      }
      this.storeActiveElement();
      this.resetEditors();
      this.panel.show();
      this.hostEditor.focus();
      nreplPortPath = atom.project.getPaths().find(function(path) {
        return fs.existsSync(path + "/.nrepl-port");
      });
      defaultPort = nreplPortPath ? fs.readFileSync(nreplPortPath + "/.nrepl-port").toString() : "";
      return this.portEditor.getModel().setPlaceholderText(defaultPort);
    };

    NReplConnectionView.prototype.onConfirm = function() {
      var host, port, ref1;
      host = this.hostEditor.getText() || defaultHost;
      port = this.portEditor.getText() || defaultPort;
      if (typeof this.confirmCallback === "function") {
        this.confirmCallback({
          port: parseInt(port),
          host: host
        });
      }
      return (ref1 = this.panel) != null ? ref1.hide() : void 0;
    };

    NReplConnectionView.prototype.onCancel = function() {
      var ref1;
      if ((ref1 = this.panel) != null) {
        ref1.hide();
      }
      return this.restoreFocus();
    };

    NReplConnectionView.prototype.storeActiveElement = function() {
      return this.previousActiveElement = $(document.activeElement);
    };

    NReplConnectionView.prototype.restoreFocus = function() {
      var ref1;
      return (ref1 = this.previousActiveElement) != null ? ref1.focus() : void 0;
    };

    NReplConnectionView.prototype.resetEditors = function() {
      this.hostEditor.setText('');
      return this.portEditor.setText('');
    };

    NReplConnectionView.prototype.toggleFocus = function() {
      if (this.hostEditor.element.hasFocus()) {
        return this.portEditor.element.focus();
      } else {
        return this.hostEditor.element.focus();
      }
    };

    return NReplConnectionView;

  })(View);

}).call(this);
