// Generated by CoffeeScript 1.12.7
(function() {
  var EditorUtils, Point, Range, bufferPositionContext, completionToSuggestion, completionsCode, getPrefix, ref, self_hosted_clj;

  ref = require('atom'), Range = ref.Range, Point = ref.Point;

  EditorUtils = require('./editor-utils');

  self_hosted_clj = require('./proto_repl/self_hosted.js');

  completionToSuggestion = function(prefix, arg) {
    var candidate, docs, type;
    candidate = arg.candidate, docs = arg.docs, type = arg.type;
    return {
      text: candidate,
      type: type,
      description: docs,
      replacementPrefix: prefix
    };
  };

  bufferPositionContext = function(editor, pos, prefix) {
    var beginning, beginningEnd, ending, range, ranges;
    ranges = EditorUtils.getTopLevelRanges(editor);
    range = ranges.find(function(range) {
      return range.containsPoint(pos);
    });
    if (range) {
      beginningEnd = new Point(pos.row, pos.column - prefix.length);
      beginning = editor.getTextInBufferRange(new Range(range.start, beginningEnd));
      ending = editor.getTextInBufferRange(new Range(pos, range.end));
      return beginning + "__prefix__" + ending;
    } else {
      return "nil";
    }
  };

  completionsCode = function(editor, bufferPosition, prefix) {
    var context, escapedStr, ns;
    context = bufferPositionContext(editor, bufferPosition, prefix);
    ns = EditorUtils.findNsDeclaration(editor) || "nil";
    escapedStr = EditorUtils.escapeClojureCodeInString(context);
    return "(do (require 'compliment.core) (let [completions (compliment.core/completions \"" + prefix + "\" {:tag-candidates true :ns '" + ns + " :context " + escapedStr + "})] (->> completions (take 50) (mapv #(assoc % :docs (compliment.core/documentation (:candidate %) '" + ns + "))))))";
  };

  getPrefix = function(editor, bufferPosition) {
    var line, ref1, regex;
    regex = /[A-Za-z0-9_\-><\/.?!*:]+$/;
    line = editor.getTextInRange([[bufferPosition.row, 0], bufferPosition]);
    return ((ref1 = line.match(regex)) != null ? ref1[0] : void 0) || '';
  };

  module.exports = {
    getPrefix: getPrefix,
    completionsCode: completionsCode,
    bufferPositionContext: bufferPositionContext,
    completionToSuggestion: completionToSuggestion
  };

}).call(this);
