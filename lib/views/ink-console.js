// Generated by CoffeeScript 1.12.7
(function() {
  var CONSOLE_URI, CompositeDisposable, Emitter, Highlights, InkConsole, Point, Range, ref;

  ref = require('atom'), CompositeDisposable = ref.CompositeDisposable, Range = ref.Range, Point = ref.Point, Emitter = ref.Emitter;

  Highlights = require('../highlights.js');

  CONSOLE_URI = 'atom://proto-repl/console';

  module.exports = InkConsole = (function() {
    InkConsole.prototype.emitter = null;

    InkConsole.prototype.subscriptions = null;

    InkConsole.prototype.ink = null;

    InkConsole.prototype.console = null;

    InkConsole.prototype.higlighter = null;

    function InkConsole(ink) {
      this.ink = ink;
      this.emitter = new Emitter;
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(atom.workspace.addOpener((function(_this) {
        return function(uri) {
          if (uri === CONSOLE_URI) {
            _this.emitter.emit('proto-repl-ink-console:open');
            return _this.console;
          }
        };
      })(this)));
      this.startConsole();
      this.highlighter = new Highlights({
        registry: atom.grammars
      });
    }

    InkConsole.prototype.startConsole = function() {
      var TAB_TITLE;
      this.console = this.ink.Console.fromId('proto-repl');
      TAB_TITLE = 'Proto-REPL';
      this.console.getTitle = function() {
        return TAB_TITLE;
      };
      this.console.emitter.emit('did-change-title', TAB_TITLE);
      this.console.activate();
      this.console.onEval((function(_this) {
        return function(ed) {
          return _this.executeEnteredText(ed);
        };
      })(this));
      this.console.setModes([
        {
          name: 'proto-repl',
          "default": true,
          grammar: 'source.clojure'
        }
      ]);
      this.console.destroy = (function(_this) {
        return function() {
          _this.emitter.emit('proto-repl-ink-console:close');
          return _this.console = null;
        };
      })(this);
      return atom.workspace.open(CONSOLE_URI, {
        split: 'right',
        searchAllPanes: true
      });
    };

    InkConsole.prototype.onDidOpen = function(callback) {
      return callback();
    };

    InkConsole.prototype.onDidClose = function(callback) {
      return this.emitter.on('proto-repl-ink-console:close', callback);
    };

    InkConsole.prototype.clear = function() {
      return this.console.reset();
    };

    InkConsole.prototype.info = function(text) {
      var ref1;
      return (ref1 = this.console) != null ? ref1.info(text) : void 0;
    };

    InkConsole.prototype.stderr = function(text) {
      var ref1;
      return (ref1 = this.console) != null ? ref1.stderr(text) : void 0;
    };

    InkConsole.prototype.stdout = function(text) {
      var ref1;
      return (ref1 = this.console) != null ? ref1.stdout(text) : void 0;
    };

    InkConsole.prototype.doc = function(text) {
      var ref1;
      return (ref1 = this.console) != null ? ref1.output({
        type: 'info',
        icon: 'book',
        text: text
      }) : void 0;
    };

    InkConsole.prototype.result = function(text) {
      var div, el, html;
      html = this.highlighter.highlightSync({
        fileContents: text,
        scopeName: 'source.clojure'
      });
      html = html.replace(/&nbsp;/g, " ");
      div = document.createElement('div');
      div.innerHTML = html;
      el = div.firstChild;
      el.classList.add("proto-repl-console");
      el.style.fontSize = atom.config.get('editor.fontSize') + "px";
      el.style.lineHeight = atom.config.get('editor.lineHeight');
      return this.console.result(el, {
        error: false
      });
    };

    InkConsole.prototype.displayExecutedCode = function(code) {
      var inputCell;
      inputCell = this.console.getInput();
      if (!(inputCell.editor.getText())) {
        inputCell.editor.setText(code);
      }
      this.console.logInput();
      this.console.done();
      return this.console.input();
    };

    InkConsole.prototype.executeEnteredText = function(inputCell) {
      var code, editor;
      if (inputCell == null) {
        inputCell = {};
      }
      editor = this.console.getInput().editor;
      if (!editor.getText().trim()) {
        return null;
      }
      code = editor.getText();
      if (!atom.config.get('proto-repl.displayExecutedCodeInRepl')) {
        this.displayExecutedCode(code);
      }
      return window.protoRepl.executeCode(code, {
        displayCode: code,
        doBlock: true
      });
    };

    return InkConsole;

  })();

}).call(this);
